{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import pylab as pl\n",
    "import numpy as np\n",
    "import os\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>ANNUAL</th>\n",
       "      <th>AUTUMN</th>\n",
       "      <th>SUMMER</th>\n",
       "      <th>MONSOON</th>\n",
       "      <th>WINTER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1901</td>\n",
       "      <td>24.23</td>\n",
       "      <td>18.71</td>\n",
       "      <td>26.06</td>\n",
       "      <td>27.30</td>\n",
       "      <td>21.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1902</td>\n",
       "      <td>24.33</td>\n",
       "      <td>19.70</td>\n",
       "      <td>26.44</td>\n",
       "      <td>27.18</td>\n",
       "      <td>21.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1903</td>\n",
       "      <td>23.80</td>\n",
       "      <td>19.05</td>\n",
       "      <td>25.47</td>\n",
       "      <td>27.17</td>\n",
       "      <td>21.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1904</td>\n",
       "      <td>23.86</td>\n",
       "      <td>18.66</td>\n",
       "      <td>25.84</td>\n",
       "      <td>26.83</td>\n",
       "      <td>21.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1905</td>\n",
       "      <td>23.71</td>\n",
       "      <td>17.58</td>\n",
       "      <td>24.99</td>\n",
       "      <td>27.37</td>\n",
       "      <td>21.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR  ANNUAL  AUTUMN  SUMMER  MONSOON  WINTER\n",
       "0  1901   24.23   18.71   26.06    27.30   21.92\n",
       "1  1902   24.33   19.70   26.44    27.18   21.49\n",
       "2  1903   23.80   19.05   25.47    27.17   21.27\n",
       "3  1904   23.86   18.66   25.84    26.83   21.42\n",
       "4  1905   23.71   17.58   24.99    27.37   21.48"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file = pd.read_csv(r\"D:\\ASHSIH\\ENGG\\COURSES\\MachineLearning\\MeanTemp.csv\")\n",
    "file.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AUTUMN</th>\n",
       "      <th>SUMMER</th>\n",
       "      <th>MONSOON</th>\n",
       "      <th>WINTER</th>\n",
       "      <th>ANNUAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18.71</td>\n",
       "      <td>26.06</td>\n",
       "      <td>27.30</td>\n",
       "      <td>21.92</td>\n",
       "      <td>24.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.70</td>\n",
       "      <td>26.44</td>\n",
       "      <td>27.18</td>\n",
       "      <td>21.49</td>\n",
       "      <td>24.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.05</td>\n",
       "      <td>25.47</td>\n",
       "      <td>27.17</td>\n",
       "      <td>21.27</td>\n",
       "      <td>23.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18.66</td>\n",
       "      <td>25.84</td>\n",
       "      <td>26.83</td>\n",
       "      <td>21.42</td>\n",
       "      <td>23.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.58</td>\n",
       "      <td>24.99</td>\n",
       "      <td>27.37</td>\n",
       "      <td>21.48</td>\n",
       "      <td>23.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>19.93</td>\n",
       "      <td>27.06</td>\n",
       "      <td>27.33</td>\n",
       "      <td>22.24</td>\n",
       "      <td>24.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>19.79</td>\n",
       "      <td>26.33</td>\n",
       "      <td>27.64</td>\n",
       "      <td>21.93</td>\n",
       "      <td>24.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>21.33</td>\n",
       "      <td>26.52</td>\n",
       "      <td>27.40</td>\n",
       "      <td>22.66</td>\n",
       "      <td>25.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>20.10</td>\n",
       "      <td>26.69</td>\n",
       "      <td>27.49</td>\n",
       "      <td>22.32</td>\n",
       "      <td>24.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>19.16</td>\n",
       "      <td>26.46</td>\n",
       "      <td>27.26</td>\n",
       "      <td>22.87</td>\n",
       "      <td>24.61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>108 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     AUTUMN  SUMMER  MONSOON  WINTER  ANNUAL\n",
       "0     18.71   26.06    27.30   21.92   24.23\n",
       "1     19.70   26.44    27.18   21.49   24.33\n",
       "2     19.05   25.47    27.17   21.27   23.80\n",
       "3     18.66   25.84    26.83   21.42   23.86\n",
       "4     17.58   24.99    27.37   21.48   23.71\n",
       "..      ...     ...      ...     ...     ...\n",
       "103   19.93   27.06    27.33   22.24   24.74\n",
       "104   19.79   26.33    27.64   21.93   24.58\n",
       "105   21.33   26.52    27.40   22.66   25.06\n",
       "106   20.10   26.69    27.49   22.32   24.77\n",
       "107   19.16   26.46    27.26   22.87   24.61\n",
       "\n",
       "[108 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns = file[['AUTUMN','SUMMER','MONSOON','WINTER','ANNUAL']]\n",
    "columns.head(108)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(columns.MONSOON,columns.ANNUAL,  color='blue')\n",
    "plt.xlabel(\"Monsoon\")\n",
    "plt.ylabel(\"Annual\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "msk = np.random.rand(len(file)) < 1.0\n",
    "train = columns[msk]\n",
    "\n",
    "file1 = pd.read_csv(r\"D:\\ASHSIH\\ENGG\\COURSES\\MachineLearning\\MeanTemp1.csv\")\n",
    "file1.head(8)\n",
    "columns1 = file1[['AUTUMN','SUMMER','MONSOON','WINTER','ANNUAL']]\n",
    "columns1.head(108)\n",
    "msk1 = np.random.rand(len(file1)) < 1.0\n",
    "test = columns1[msk1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [[0.16998255 0.2487016  0.3035734  0.26549705]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "regr = linear_model.LinearRegression()\n",
    "x = np.asanyarray(train[['AUTUMN','SUMMER','MONSOON','WINTER']])\n",
    "y = np.asanyarray(train[['ANNUAL']])\n",
    "regr.fit (x, y)\n",
    "# The coefficients\n",
    "print ('Coefficients: ', regr.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "predictions: [[25.1305279 ]\n",
      " [24.7126683 ]\n",
      " [24.82486442]\n",
      " [24.91950035]\n",
      " [24.67994958]\n",
      " [25.05007989]\n",
      " [26.4759059 ]\n",
      " [26.26417195]]\n",
      "Residual sum of squares: 0.01\n",
      "Variance score: 0.99\n"
     ]
    }
   ],
   "source": [
    "y_hat= regr.predict(test[['AUTUMN','SUMMER','MONSOON','WINTER']])\n",
    "print('predictions:',y_hat)\n",
    "x = np.asanyarray(test[['AUTUMN','SUMMER','MONSOON','WINTER']])\n",
    "y = np.asanyarray(test[['ANNUAL']])\n",
    "print(\"Residual sum of squares: %.2f\"\n",
    "      % np.mean((y_hat - y) ** 2))\n",
    "\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print('Variance score: %.2f' % regr.score(x, y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAEGCAYAAABy53LJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAacUlEQVR4nO3df5Bd5WHe8e8jftgWEFsYQSQhWKBgm9hYkIWSYBoDwbWV1JjpOIbZqGrrVC41roSxEwwzLk6GCaX8aP5IcRekGjtrE1wEpjY1Zgi265lW9kqRJcFCwFjCoLVYktTSWDWu0NM/zlF1dXXv7j279+zP5zNz557znvOefd/dnfvc8+s9sk1ERESn5k11AyIiYmZJcERERCUJjoiIqCTBERERlSQ4IiKikiOnugGT4YQTTnBPT89UNyMiYkbZuHHjq7YXNpfPieDo6elhcHBwqpsRETGjSNrRqjyHqiIiopLagkPSUklPShqS9JSk1Q3LPiHp2bL8tjb1t0vaKmmzpMGG8uMlPS7pufJ9QV19iIiIw9V5qGofcL3tTZKOAzZKehw4CbgCOMf2a5JOHGUbl9h+tansBuAJ27dKuqGc/6M6OhAREYerbY/D9rDtTeX0HmAIWAJcA9xq+7Vy2SsVN30FcF85fR/woe60OCIiOjEp5zgk9QDnAhuAs4CLJW2Q9B1J57epZuBbkjZKWtVQfpLtYSjCCWi5xyJplaRBSYMjIyPd6kpExJxX+1VVko4FHgTW2N4t6UhgAXAhcD7wgKTTffhoixfZ3lkeynpc0jO2v9vpz7XdD/QD9Pb2ZiTHiIguqXWPQ9JRFKExYHt9WfwSsN6F7wP7gROa69reWb6/AjwEXFAu2iVpUbn9RUDVQ10RETEBdV5VJWAtMGT7zoZFDwOXluucBRwNvNpU95jyhDqSjgHeB2wrFz8CrCynVwJfq6sPERGTZWAAenpg3rzifWBgqlvUXp2Hqi4CVgBbJW0uy24E1gHrJG0DfgmstG1Ji4F7bS+nuPLqoSJ7OBL4su1vltu4leLw1keBF4EP19iHiIjaDQzAqlWwd28xv2NHMQ/Q1zd17WpHc+FBTr29vc6d4xExXfX0FGHR7NRTYfv2yW7NQZI22u5tLs+d4xERU+zFF6uVT7UER0TEFDvllGrlUy3BERExxW65BebPP7Rs/vyifDpKcERETLG+PujvL85pSMV7f//0PDEOc2RY9YiI6a6vb/oGRbPscURERCUJjoiIqCTBERERlSQ4IiKikgRHRERUkuCIiIhKEhwREVFJgiMiIipJcERERCUJjoiIWWKyHgaVIUciImaByXwYVPY4IiJmgZtuOhgaB+zdW5R3W4IjImIWmMyHQdUWHJKWSnpS0pCkpyStblj2CUnPluW3Vax7s6SXJW0uX8vr6kNExEwxmQ+DqvMcxz7getubJB0HbJT0OHAScAVwju3XJJ3YaV3bT5fL77J9e41tj4iYUW655dBzHFDfw6Bq2+OwPWx7Uzm9BxgClgDXALfafq1c9kqFuhER0cJkPgxqUs5xSOoBzgU2AGcBF0vaIOk7ks6vUPeAayVtkbRO0oJaGh0RMcP09cH27bB/f/Fe14Ohag8OSccCDwJrbO+mODy2ALgQ+DTwgCR1WBfgbuAMYBkwDNzRpu4qSYOSBkdGRrrZpYiIOa3W4JB0FMUH/4Dt9WXxS8B6F74P7AdO6LAutnfZft32fuAe4IJWP9t2v+1e270LFy7sbsciIuawOq+qErAWGLJ9Z8Oih4FLy3XOAo4GXu2wLpIWNcxeCWzrfusjIqKdOvc4LgJWAJc2XTq7Djhd0jbgfmClbUtaLOnRMeoC3CZpq6QtwCXAdTX2ISIimtR2Oa7t7wEtz10Av99i/Z3A8rHq2l7RrTZGRER1uXM8IiIqSXBEREQlCY6IiKgkwREREZUkOCIiopIER0REVJLgiIiIShIcERFRSYIjIiIqSXBEREQlCY6IiKgkwREREZUkOCIiopIER0REVJLgiIiIShIcERFRSYIjIiIqSXBEREQlCY6IiKiktuCQtFTSk5KGJD0laXXDsk9IerYsv61N/feX6zwv6YaG8uMlPS7pufJ9QV19iIiIw9W5x7EPuN72O4ALgY9LOlvSJcAVwDm2fw24vbmipCOAPwc+AJwNXC3p7HLxDcATts8EnijnIyJiktQWHLaHbW8qp/cAQ8AS4BrgVtuvlcteaVH9AuB52y/Y/iVwP0XYUL7fV07fB3yorj5ERMThJuUch6Qe4FxgA3AWcLGkDZK+I+n8FlWWAD9pmH+pLAM4yfYwFOEEnNjmZ66SNChpcGRkpDsdiYiI+oND0rHAg8Aa27uBI4EFFIevPg08IEnN1VpsylV+ru1+2722excuXDiOlkdERCu1BoekoyhCY8D2+rL4JWC9C98H9gMnNFV9CVjaMH8ysLOc3iVpUbn9RUCrQ10REVGTOq+qErAWGLJ9Z8Oih4FLy3XOAo4GXm2q/gPgTEmnSToauAp4pFz2CLCynF4JfK2eHkRERCt17nFcBKwALpW0uXwtB9YBp0vaRnHSe6VtS1os6VEA2/uAa4HHKE6qP2D7qXK7twKXS3oOuLycj4iISSK70qmDGam3t9eDg4NT3YyIiBlF0kbbvc3luXM8IiIqSXBEREQlCY6IiKgkwREREZUkOCIiopIER0REVJLgiIiIShIcERFRSYIjIiIqSXBEREQlCY6IiKgkwREREZUkOCIiopIER0REVJLgiIiIShIcERFRSYIjIiIqSXBEREQltQWHpKWSnpQ0JOkpSavL8pslvdz0HPLmum9rWL5Z0m5JazqtHxER9Tmyxm3vA663vUnSccBGSY+Xy+6yfXu7irafBZYBSDoCeBl4qGGVUetHRER9agsO28PAcDm9R9IQsGQcm7oM+JHtHd1sX0REjM+knOOQ1AOcC2woi66VtEXSOkkLxqh+FfCVprIx60taJWlQ0uDIyMhEmh8REQ1qDw5JxwIPAmts7wbuBs6gOBQ1DNwxSt2jgQ8CX20o7qi+7X7bvbZ7Fy5c2I2uREQENQeHpKMoQmPA9noA27tsv257P3APcMEom/gAsMn2rgMFFetHRESX1XlVlYC1wJDtOxvKFzWsdiWwbZTNXE3TYaqK9SMiosvqvKrqImAFsFXS5rLsRuBqScsAA9uBjwFIWgzca3t5OT8fuPzA8ga3taofERGTo86rqr4HqMWiR9usvxNY3jC/F3hri/VWdKuNERFRXdvgkHT8aBVt/133mxMREdPdaHscGykOB7XaazBwei0tioiIaa1tcNg+bTIbEhERM0NH5zjKm+zOBN54oMz2d+tqVERETF9jBoekPwBWAycDm4ELgf8JXFpv0yIiYjrq5D6O1cD5wA7bl1AMHZIxPCIi5qhOguMXtn8BIOkNtp8B3lZvsyIiYrrq5BzHS5LeAjwMPC7p74Gd9TYrIiKmqzGDw/aV5eTNkp4E3gx8s9ZWRUTEtNXJyfFTGmZ/XL7/KvBiLS2KiIhprZNDVd/g4I2AbwROA54Ffq3GdkVExDTVyaGqdzXOSzqPDCwYETFnVR5W3fYmistzIyJiDurkHMcnG2bnAeeR+zgiIuasTs5xHNcwvY/inMeD9TQnIiKmu07OcXxuMhoSEREzQyeHqs4CPgX0NK5vO2NVRUTMQZ0cqvoq8HngXuD1epsTERHTXSfBsc/23VU3LGkp8EWKmwX3A/22/0zSzcC/4uAJ9httH/Y4WUnbgT0UYbXPdm9ZfjzwlxR7QNuB37P991XbFxER49PJ5bj/TdK/kbRI0vEHXh3U2wdcb/sdFEOxf1zS2eWyu2wvK18tn0FeuqRcp7eh7AbgCdtnAk+U8xERMUk62eNYWb5/uqFszEfH2h4GhsvpPZKGgCXjaWSTK4D3ltP3Ad8G/qgL242IiA6Mucdh+7QWr0rPG5fUQ/Ecjw1l0bWStkhaVz5dsOWPBr4laaOkVQ3lJ5WhdCCcTqzSloiImJhOHx37mxx+VdUXO6x7LMV9H2ts75Z0N/AnFMHwJ8AdwL9sUfUi2zslnUgxnPszVR5XW4bNKoBTTjlljLUjIqJTY+5xSPoScDvwHoqhRs4HeketdLDuURShMWB7PYDtXbZft70fuAe4oFVd2zvL91eAhxrW2yVpUbn9RcArber32+613btw4cJOmhsRER3oZI+jFzjbtqtsWJKAtcCQ7TsbyhcdONQEXAlsa1H3GGBeeW7kGOB9wB+Xix+hOO9ya/n+tSrtioiIiekkOLZRXFI7PNaKTS4CVgBbJW0uy24Erpa0jOJQ1XbKkXYlLQbutb0cOAl4qMgejgS+bPvAw6NuBR6Q9FGKZ4J8uGK7IiJiAjoJjhOApyV9H3itLLPtK0arZPt7FM/waNby8tvy0NTycvoF4N1t1vtb4LIO2h0RETXoJDhubpgWxbmOq2tpTURETHudXI77HeBnwO8AX6D4tv/5epsVERHTVds9jnJww6so9i7+lmKYD9m+ZJLaFhER09Boh6qeAf4H8E9sPw8g6bpJaVVERExbox2q+qfAT4EnJd0j6TJan+yOiIg5pG1w2H7I9keAt1OMB3UdcJKkuyW9b5LaFxER00wnJ8d/bnvA9u8CJwObyYi0ERFzVifDqv9/tv/O9n/O0/8iIuauSsERERGR4IiIiEoSHBERUUmCIyIiKklwREREJQmOiIioJMERERGVJDgiIqKSBEdERFSS4IiIiEoSHBERUUltwSFpqaQnJQ1JekrS6rL8ZkkvS9pcvpZ3WrfT+hERUZ9Onjk+XvuA621vknQcsFHS4+Wyu2zfXrWu7ac7rB8RETWpLThsDwPD5fQeSUPAkgnWfXrUihERUbtJOcchqQc4F9hQFl0raYukdZIWVKzbUX1JqyQNShocGRmZaBciIqJUe3BIOhZ4EFhjezdwN3AGsIxir+KOCnXptL7tftu9tnsXLlzYre5ERMx5tQaHpKMoPvgHbK8HsL3L9uu29wP3ABd0WrdK/YiIqEedV1UJWAsM2b6zoXxRw2pXAts6rdtp/YiIqE+dV1VdBKwAtkraXJbdCFwtaRlgYDvwMQBJi4F7bS9vV9f2o8BtrepHRMTkqPOqqu8BarHo0Tbr7wSWj1EX2yu61caIiKgud45HREQlCY6IiKgkwREREZUkOCIiopIER5cNDEBPD8ybV7wPDEx1iyIiuqvOy3HnnIEBWLUK9u4t5nfsKOYB+vqmrl0REd2UPY4uuummg6FxwN69RXlExGyR4OiiF1+sVh4RMRMlOLrolFOqlUdEzEQJji665RaYP//Qsvnzi/KIiNkiwdFFfX3Q3w+nngpS8d7fnxPjETG75KqqLuvrS1BExOyWPY6IiKgkwREREZUkOCIiopIER0REVJLgiIiIShIcERFRSW3BIWmppCclDUl6StLqsvxmSS9L2ly+lrep/35Jz0p6XtINDeXHS3pc0nPl+4K6+hAREYerc49jH3C97XcAFwIfl3R2uewu28vK12HPIJd0BPDnwAeAs4GrG+reADxh+0zgiXI+IiImSW3BYXvY9qZyeg8wBCzpsPoFwPO2X7D9S+B+4Ipy2RXAfeX0fcCHutfqiIgYy6Sc45DUA5wLbCiLrpW0RdK6NoealgA/aZh/iYOhc5LtYSjCCTixzc9cJWlQ0uDIyEgXehERETAJwSHpWOBBYI3t3cDdwBnAMmAYuKNVtRZlrvJzbffb7rXdu3DhwoqtjoiIdmoNDklHUYTGgO31ALZ32X7d9n7gHorDUs1eApY2zJ8M7Cynd0laVG5/EfBKXe2PiIjD1XlVlYC1wJDtOxvKFzWsdiWwrUX1HwBnSjpN0tHAVcAj5bJHgJXl9Erga91ue0REtFfn6LgXASuArZI2l2U3UlwhtYzi0NN24GMAkhYD99pebnufpGuBx4AjgHW2nyq3cSvwgKSPAi8CH66xDxER0UR2pVMHM1Jvb68HBwenuhkRETOKpI22e5vLc+d4RERUkuCIWgwMQE8PzJtXvA8MTHWLIqJb8gTA6LqBAVi1CvbuLeZ37CjmIU9HjJgNsscRXXfTTQdD44C9e4vyiJj5EhzRdS++WK08ImaWBEd03SmnVCuPiJklwRFdd8stMH/+oWXz5xflETHzJTii6/r6oL8fTj0VpOK9vz8nxiNmi1xVFbXo60tQRMxW2eOIiIhKEhwREVFJgqMDuQs6IuKgnOMYQ+6Cjog4VPY4xpC7oCMiDpXgGEPugo6IOFSCYwy5Czoi4lAJjjHkLuiIiEMlOMaQu6AjIg5VW3BIWirpSUlDkp6StLpp+ackWdIJLeq+TdLmhtduSWvKZTdLerlh2fK6+nBAXx9s3w779xfvCY2ImMvqvBx3H3C97U2SjgM2Snrc9tOSlgKXAy1PMdt+FlgGIOkI4GXgoYZV7rJ9e41tj4iINmrb47A9bHtTOb0HGAKWlIvvAv4QcAebugz4ke0dtTQ0IiIqmZRzHJJ6gHOBDZI+CLxs+4cdVr8K+EpT2bWStkhaJ2lB91oac1VGB4joXO3BIelY4EFgDcXhq5uAz3ZY92jgg8BXG4rvBs6gOJQ1DNzRpu4qSYOSBkdGRsbfgZj1DowOsGMH2AdHB0h4RLQmu5OjRePcuHQU8HXgMdt3SnoX8ARw4F7sk4GdwAW2f9qi/hXAx22/r832e4Cv237naO3o7e314ODguPsRs1tPTxEWzU49tbgYImKukrTRdm9zeW0nxyUJWAsM2b4TwPZW4MSGdbYDvbZfbbOZq2k6TCVpke3hcvZKYFuXmx5zTEYHiKimzkNVFwErgEs7uXRW0mJJjzbMz6e48mp906q3SdoqaQtwCXBdDW2PCmb6+YGMDhBRTW17HLa/B2iMdXoapncCyxvm9wJvbVFnRfdaGRM1G0YPvuWWQ/sAGR0gYjS5c3yKzfRv67Nh9OCMDhBRTa0nx6eL6XpyvPnbOhTfdGfSh9a8ecWVSM2k4k77iJi52p0czx7HFJoN39ZzfiBi7klwTKHZcDVPRg+OmHsSHFNoNnxbz/mBiLknwTGFZsu39YweHDG3JDimUL6tR8RMVOew6tGBvr4ERUTMLNnjiIiIShIcERFRSYIjIiIqSXBEREQlCY6IiKgkwREREZUkOCIiopI5MTqupD3As1PdjklwAtDuaYqzyVzo51zoI8yNfs7kPp5qe2Fz4Vy5AfDZVkMDzzaSBtPP2WEu9BHmRj9nYx9zqCoiIipJcERERCVzJTj6p7oBkyT9nD3mQh9hbvRz1vVxTpwcj4iI7pkrexwREdElCY6IiKhkRgeHpKWSnpQ0JOkpSavL8r+UtLl8bZe0eZRtHCHpryV9ffJaXs1E+ynpLZL+q6Rnym38xuT2YGxd6ON1Zb1tkr4i6Y2T24POjNLPZZL+V9nPQUkXtKn/fknPSnpe0g2T2/rOTKSP7epORxP9W5brTvvPn5Zsz9gXsAg4r5w+Dvgb4Oymde4APjvKNj4JfBn4+lT3p65+AvcBf1BOHw28Zar71M0+AkuAHwNvKucfAP75VPepSj+BbwEfKMuXA99uUfcI4EfA6eXf8YfNv6Pp8JpgH8f8P5gur4n0s2Eb0/7zp9VrRu9x2B62vamc3gMMUXyIACBJwO8BX2lVX9LJwO8A99bf2vGbSD8l/Qrwj4C1Zf1f2v7fk9HuKib6t6S4mfVNko4E5gM7623x+IzSTwO/Uq72Zlq3/wLgedsv2P4lcD9wRf2trmYifRzr/2A6meDfcsZ8/rQya+4cl9QDnAtsaCi+GNhl+7k21f4j8IcU3xZmhHH083RgBPgvkt4NbARW2/55zU0dt6p9tP2ypNuBF4H/A3zL9rcmoakT0tTPNcBjZT/mAb/ZosoS4CcN8y8B/7DeVk7MOPrYru60Ns5+zrjPnwNm9B7HAZKOBR4E1tje3bDoatrvbfwu8IrtjZPQxK4YTz8pvhycB9xt+1zg58C0PDYO4/5bLqD45n0asBg4RtLv193WiWjRz2uA62wvBa6j3ENsrtaibNpeTz/OPrarO22Np58z8fPnEFN9rGyiL+Ao4DHgk03lRwK7gJPb1PtTim9s24GfAnuBv5jq/tTQz18FtjfMXwx8Y6r70+U+fhhY2zD/z4D/NNX9qdJP4GccvK9KwO4W9X4DeKxh/jPAZ6a6P93s42j/B9PxNYG/5Yz6/Gl+zeg9jvK491pgyPadTYt/G3jG9kut6tr+jO2TbfcAVwF/ZXtafkudYD9/CvxE0tvKosuAp2tr7DhNpI8Uh6gulDS/3M5lFMebp51R+rkT+K1y+lKg1WHHHwBnSjpN0tEU/7eP1Nne8ZhIH8f4P5hWJtLPmfT509JUJ9cE0/49FLvqW4DN5Wt5uewLwL9uWn8x8GiL7byXaXxVw0T7CSwDBsv6DwMLprpPNfTxc8AzwDbgS8AbprpPVfpZlm+kuFJqA/Drbfq5nOLqnR8BN011f7rdx9H+D6bba6J/y4btTOvPn1avDDkSERGVzOhDVRERMfkSHBERUUmCIyIiKklwREREJQmOiIioJMER0SFJlvSlhvkjJY3MuJFNIyYowRHRuZ8D75T0pnL+cuDlKWxPxJRIcERU898pRjSFpvGzJB0v6WFJW8rnMZxTlt8saZ2kb0t6QdK/LcuPkfQNST8snyPykbL8svIZDVvLem8Yo3y7pM9J2lQue/sk/j5iDkpwRFRzP3CVigdFncOhI7d+Dvhr2+cANwJfbFj2duAfUwyN/u8kHQW8H9hp+9223wl8s9zuF4CP2H4XxThd17Qrb9j+q7bPA+4GPtXlPkccIsERUYHtLUAPxd7Go02L30Mx3Am2/wp4q6Q3l8u+Yfs1268CrwAnAVuB35b07yVdbPtnwNuAH9v+m7LefRTPU2lXfsD68n1j2b6I2iQ4Iqp7BLidw4d5H23Y89cayl4HjixD4NcpAuRPJX22zTbabbvRge2/zix6zk5MTwmOiOrWAX9se2tT+XeBPgBJ76U4fNT2WRKSFgN7bf8FRRCdRzFQY4+kf1CutgL4zijlEZMu30wiKnIxvPuftVh0M8WTFrdQPF9h5RibehfwHyTtB/4vcI3tX0j6F8BXy8fg/gD4vO3XWpV3p0cR1WR03IiIqCSHqiIiopIER0REVJLgiIiIShIcERFRSYIjIiIqSXBEREQlCY6IiKjk/wH24/eUH9WWkQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(columns1.MONSOON,columns1.ANNUAL,  color='blue')\n",
    "plt.xlabel(\"Monsoon\")\n",
    "plt.ylabel(\"Annual\")\n",
    "plt.show()\n",
    "\n",
    "plt.scatter(columns1.MONSOON,y_hat,color='blue')\n",
    "plt.xlabel(\"Monsoon\")\n",
    "plt.ylabel(\"Annual Predicted\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
